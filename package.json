{
  "name": "apimocker",
  "description": "Simple HTTP server that returns mock service API responses to your front end.",
  "version": "0.3.5",
  "engines": {
    "node": ">=0.10.0"
  },
  "author": {
    "name": "Greg Stroup",
    "email": "gstroup@gmail.com"
  },
  "dependencies": {
    "body-parser": "~1.4.3",
    "commander": ">=1",
    "express": "~4.5",
    "underscore": ">=1",
    "JSONPath": ">=0.10.0"
  },
  "devDependencies": {
    "mocha": ">=1.8.2",
    "grunt": "~0.4.0",
    "grunt-mocha-cli": "1.3.0",
    "grunt-contrib-watch": ">=0.3.1",
    "grunt-contrib-jshint": "~0.7.1",
    "chai": ">=1.5.0",
    "sinon": ">=1.6.0"
  },
  "main": "./lib/apimocker.js",
  "bin": {
    "apimocker": "./bin/apimocker.js"
  },
  "keywords": [
    "express",
    "mock",
    "stub",
    "REST",
    "SOAP",
    "testing",
    "functional",
    "api"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gstroup/apimocker.git"
  },
  "preferGlobal": true,
  "bugs": {
    "url": "https://github.com/gstroup/apimocker/issues"
  },
  "directories": {
    "bin": "./bin",
    "lib": "./lib",
    "test": "./test",
    "samplemocks": "./samplemocks"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "license": "MIT",
  "readme": "# apimocker\nThis is a node.js module to run a simple http server, which can serve up mock service responses.\nResponses can be JSON or XML to simulate REST or SOAP services.\nAccess-Control HTTP Headers are set by default to allow CORS requests.\nMock services are configured in the config.json file, or on the fly, to allow for easy functional testing.\nApimocker can return different responses or HTTP status codes, based on request parameters - even complex JSON requests.\nUsing apimocker, you can develop your web or mobile app with no dependency on back end services.\n(There are lots of these projects out there, but I wrote this one to support all kinds of responses,\nto allow on-the-fly configuration, and to run in node.)\n\n## Installation\n\t\tsudo npm install -g apimocker\nThat will install globally, and allow for easier usage.\n(On Windows, you don't need \"sudo\".)\n\n## Usage\n        apimocker [-c, --config \\<path\\>] [-q, --quiet] [-p \\<port\\>]\n\nOut of the box, you can just run \"apimocker\" with no arguments.\n(Except on windows, you'll need to edit config.json first.  See below.)\n\nThen you can visit \"http://localhost:7878/first\" in your browser to see it work.\nThe quiet and port options can also be set in the config.json file,\nand values from config.json will override values from the command line.\nAfter you get up and running, you should put your config.json and mock responses in a better location.\nIt's not a good idea to keep them under the \"node_modules\" directory.\nMake sure another process is not already using the port you want.\nIf you want port 80, you may need to use \"sudo\" on Mac OSX.\n\n### With Grunt\nIf you're using Grunt for your project, there's a grunt plugin you can use to start up apimocker:\nhttps://github.com/gstroup/grunt-apimocker\n\n### Windows note\nAfter installing from npm, you'll need to edit this file:\n        /Users/xxxxx/AppData/Roaming/npm/node_modules/apimocker/config.json\nChange the \"mockDirectory\" to point to this location.\n(Or another location where you put the mock responses.)\n        mockDirectory: /Users/xxxxx/AppData/Roaming/npm/node_modules/apimocker/samplemocks\n\n### Help\n        apimocker -h\n\n## Configuration\nOn startup, config values are loaded from the config.json file.\nDuring runtime, mock services can be configured on the fly.\nSee the sample config.json file in this package.\n\n* Services can be configured to return different responses, depending on a request parameter.\n* Content-type for a service response can be set for each service.  If not set, content-type defaults to application/xml for .xml files, and application/json for .json files.\n* HTTP Status code can be set for each service.\n* Latency (ms) can be set to simulate slow service responses.  Latency can be set for a single service, or globally for all services.\n* Allowed domains can be set to restrict CORS requests to certain domains.\n* Allowed headers can be set.  (Default is to set \"access-control-allow-headers: Content-Type\" if not specified in config file.)\n* config.json file format has changed with the 0.1.6 release.  See below for the new format.  (Old config.json file format is deprecated and doesn't support new features, but still functioning.)\n* mockDirectory value should be an absolute path.\n* A static route can be opened up to serve up static assets like images.  Both staticDirectory and staticPath must be set.  If either is not set, then nothing happens.\n* Additional headers can be defined for responses.\n\n```js\n{\n  \"note\": \"This is a sample config file. You should change the mockDirectory to a more reasonable path.\",\n  \"mockDirectory\": \"/usr/local/lib/node_modules/apimocker/samplemocks/\",\n  \"staticDirectory\": \"/optional/file/system/path/to/static/directory\",\n  \"staticPath\": \"/optional/web/path/to/static/directory\",\n  \"quiet\": false,\n  \"port\": \"7878\",\n  \"latency\": 50,\n  \"allowedDomains\": [\"abc.com\"],\n  \"allowedHeaders\": [\"Content-Type\", \"my-custom-header\"],\n  \"webServices\": {\n    \"first\": {\n      \"mockFile\": \"king.json\",\n      \"latency\": 20,\n      \"verbs\": [\"get\"]\n    },\n    \"second\": {\n      \"verbs\": [\"delete\", \"post\"],\n      \"responses\": {\n        \"delete\": {\"httpStatus\": 204},\n        \"post\": {\n          \"contentType\": \"foobar\",\n          \"mockFile\": \"king.json\"\n        }\n      }\n    },\n    \"nested/ace\": {\n      \"mockFile\": \"ace.json\",\n      \"verbs\": [\"post\", \"get\"],\n      \"switch\": \"customerId\"\n    },\n    \"nested/ace2\": {\n      \"mockFile\": \"ace.json\",\n      \"verbs\": [\"post\", \"get\"],\n      \"switch\": [\"customerId\",\"multitest\"]\n    },\n    \"var/:id\": {\n      \"mockFile\": \"xml/queen.xml\",\n      \"verbs\": [\"all\"],\n      \"switch\": \"id\"\n    },\n    \"login\": {\n      \"verbs\": [\"post\"],\n      \"switch\": [\"userId\", \"password\"],\n      \"responses\": {\n        \"post\": {\"httpStatus\": 401, \"mockFile\": \"sorry.json\"}\n      },\n      \"switchResponses\": {\n        \"userIduser1passwordgood\": {\"httpStatus\": 200, \"mockFile\": \"king.json\"},\n        \"userIdadminpasswordgood\": {\"httpStatus\": 200}\n      }\n    },\n    \"nested/aceinsleeve\": {\n      \"verbs\": [\n        \"post\"\n      ],\n      \"switch\": \"$..ItemId[(@.length-1)]\",\n      \"responses\": {\n        \"post\": {\"httpStatus\": 200, \"mockFile\": \"aceinsleeve.json\"}\n      },\n      \"switchResponses\": {\n        \"$..ItemId[(@.length-1)]4\": {\"httpStatus\": 500, \"mockFile\": \"ItemId4.aceinsleeve.json\"}\n      }\n    },\n    \"firstheaders\": {\n      \"mockFile\": \"king.json\",\n      \"contentType\": \"foobar\",\n      \"headers\": {\n        \"x-requested-by\": \"4c2df03a17a803c063f21aa86a36f6f55bdde1f85b89e49ee1b383f281d18c09c2ba30654090df3531cd2318e3c\", \n        \"dummyheader\": \"dummyvalue\"\n      },\n      \"verbs\": [\"get\"]\n    }\n  }\n}\n```\nThe most interesting part of the configuration file is the webServices section.\nThis section contains a JSON object describing each service.  The key for each service object is the service URL (endpoint.)  Inside each service object, the \"mockFile\" and \"verbs\" are required.  All other attributes of the service objects are optional.\nFor instance, a GET request sent to \"http://server:port/first\" will return the king.json file from the samplemocks directory, with a 20 ms delay.\nIf you'd like to return different responses for a single URL with different HTTP verbs (\"get\", \"post\", etc) then you'll need to add the \"responses\" object.  See above for the \"second\" service.  The \"responses\" object should contain keys for the HTTP verbs, and values describing the response for each verb.\n\n### Switch response based on request parameter\nIn your configuration, you can set up a \"switch\" parameter for each service.  If set, apimocker will check the request for this parameter, and return a different file based on the value.  For instance, if you set up a switch as seen above for \"nested/ace\", then you can will get different responses based on the request sent to apimocker.  A JSON POST request to the URL \"http://localhost:7878/nested/ace\" with this data:\n```js\n{\n  \"customerId\": 1234\n}\n```\nwill return data from the mock file called \"customerId1234.ace.json\".  Switch values can also be passed in as query parameters:\n        http://localhost:7878/nested/ace?customerId=1234\nor as part of the URL, if you have configured your service to handle variables, like the \"var/:id\" service above:\n        http://localhost:7878/var/789\nIf the specific file, such as \"customerId1234.ace.json\" is not found, then apimocker will attempt to return the base file: \"ace.json\".\n\n#### Multiple switches\nYou can now also define an array of values to switch on. Given the configuration in \"ace2\", a request to \"nested/ace2\" containing:\n```js\n{\n  \"multitest\": \"abc\",\n  \"customerId\": 1234\n}\n```\nwill return data from the mock file called \"customerId1234multitestabc.ace.json\".  Note that when using multiple switches, the filename must have parameters in the same order as configured in the \"switch\" setting in config.json.\nAlso, apimocker will look for the filename that matches ALL the request parameters.  If one does not match, then the base file will be returned.\n\n#### Switch HTTP Status\nTo specify a different HTTP status, depending on a request parameter, you'll need to set up the \"switchResponses\" as shown above for the \"login\" service.  You can also set a specific mock file using the \"switchRespones\" configuration.  The switchReponses config section is an object, where the key is a composite of the switch keys specified in the \"switch\" setting for the service, and the values for each key, passed in as request parameters.  For instance, a post request to \"/login\" containing:\n```js\n{\n  \"userId\": \"user1\",\n  \"password\": \"good\"\n}\n```\nwill return data from the mock file called \"king.json\", with HTTP status 200.\nAny other password will return \"sorry.json\" with HTTP status 401.\n\n#### JsonPath Support\nFor complex JSON requests, JsonPath expressions are supported in the switch parameter. If your switch parameter begins with \"$.\" then it will be evaluated as a JsonPath expression.  \nFor example to switch the response based on the value of the last occurence of ItemId in a JSON request, use configuration as shown for \"aceinsleeve\":\n```js\n\"switch\": \"$..ItemId[(@.length-1)]\",\n  \"responses\": {\n    \"post\": {\"httpStatus\": 200, \"mockFile\": \"aceinsleeve.json\"}\n  },\t\n  \"switchResponses\": {\n    \"$..ItemId[(@.length-1)]4\": {\"httpStatus\": 500, \"mockFile\": \"ItemId4.aceinsleeve.json\"}\n  }\n```\nAccording to this configuration, if the value of the last occurence of ItemId is 4, the mockFile \"ItemId4.aceinsleeve.json\" will be retured with a HTTP status code of 500. Otherwise, mockFile \"aceinsleeve.json\"\nwill be returned with HTTP status 200. Note: If the JsonPath expression evaluates to more then 1 element (for example, all books cheaper than 10 as in $.store.book[?(@.price < 10)] ) then the first element is considered for testing the value.\n\n#### Returning additional headers with the response\nTo return additional custom headers in the response, set the headers map in the configuration file, like this example:\n```js\n    \"firstheaders\": {\n      \"mockFile\": \"king.json\",\n      \"contentType\": \"foobar\",\n      \"headers\": {\n        \"x-requested-by\": \"4c2df03a17a803c063f21aa86a36f6f55bdde1f85b89e49ee1b383f281d18c09c2ba30654090df3531cd2318e3c\", \n        \"dummyheader\": \"dummyvalue\"\n      },\n      \"verbs\": [\"get\"]\n    }\n```\nIn this example the headers x-requested-by and dummy will be returned on the response.  contentType can be specified separately, as it is above, or specified as \"content-type\" in the \"headers\" map.\n\n## Runtime configuration\nAfter starting apimocker, mocks can be configured using a simple http api.\nThis http api can be called easily from your functional tests, to test your code's handling of different responses.\n\n### /admin/setMock\nThis allows you to set a different response for a single service at any time by sending an http request.\nRequest can be a post containing a JSON object in the body:\n```js\n{\n\t\"verb\":\"get\",\n\t\"serviceUrl\":\"third\",\n\t\"mockFile\":\"queen.xml\",\n    \"latency\": 100,\n    \"contentType\": \"anythingyouwant\"\n}\n```\n\nor a get with query string parameters:\nlocalhost:7878/admin/setMock?verb=get&serviceUrl=second&mockFile=ace.json\n\n### /admin/reload\nIf the config.json file is edited, you can send an http request to /admin/reload to pick up the changes.\n\n## Versions\n### 0.3.5\nAdded support for additional custom HTTP headers.  Thanks to @jcstover !\n### 0.3.4\nAdded support for switching response based on complex JSON request, using JSONPath.  (see issue #14)  Thanks to @priyagampa !\n### 0.3.3\nAdded support for switching response HTTP status based on a request parameter.  (see issue #12)\n### 0.3.2\nAdded support for multiple switch parameters on a single URL.  Thanks @skjegg and @snyoz !\n### 0.3.1\nAdded support for a static path.  (see issue #9)\n### 0.3.0\nRefactored and updated to use Express 4.5.  (No functional change.)\n### 0.2.4\nAllows configuration of the \"access-control-allow-headers\" HTTP header.\n### 0.2.3\nNow allows HTTP status code to be set for each response.  Config file format also allows configuration of different responses based on http verb.\n### 0.1.8\nNew \"switch\" feature added, allowing different responses based on a request parameter.\n### 0.1.6\nNew config file format was introduced, allowing for custom content-types and more fine grained control over services.\n\n## Contributors\nRun \"grunt watch\" in the root \"apimocker\" directory to start the grunt watch task.  This will run JSHint and mocha tests.\n\n## Acknowledgements\nBig thanks to magalhas for his httpd-mock project.  This gave me a great starting point.\nAlso thanks to clafonta and the Mockey project for inspiration.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/gstroup/apimocker",
  "_id": "apimocker@0.3.5",
  "dist": {
    "shasum": "baf8a586c45ca67a8533f149cffad2166ad56715"
  },
  "_from": "apimocker@",
  "_resolved": "https://registry.npmjs.org/apimocker/-/apimocker-0.3.5.tgz"
}
